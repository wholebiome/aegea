# This configuration file (aegea/base_config.yml) is the source of configuration defaults for aegea. In order of
# increasing precedence, configuration is ingested from this file, the site-wide config file /etc/aegea/config.yml, the
# user config file ~/.config/aegea/config.yml (created the first time aegea runs), any files listed in the
# colon-delimited variable AEGEA_CONFIG_FILE, and command-line options. See
# https://github.com/kislyuk/aegea#configuration-management for more information.

# The contents of arrays in build_image (such as build_image.commands) get added to the configuration for both
# build_docker_image and build_ami.
build_image:
  commands:
    - "pip3 install awscli-cwlogs==1.4.0 keymaker==0.2.1 boto3==1.4.3 awscli==1.11.44 dynamoq==0.0.5 tractorbeam==0.1.3 docopt=0.6.2"
  packages:
    - language-pack-en
    - iptables-persistent
    - debian-goodies
    - bridge-utils
    - pixz
    - cryptsetup-bin
    - mdadm
    - btrfs-tools
    - libffi-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - libyaml-dev
    - libcurl4-openssl-dev
    - libjemalloc-dev
    - libzip-dev
    - libsnappy-dev
    - liblz4-dev
    - libgmp-dev
    - libmpfr-dev
    - libhts-dev
    - libsqlite3-dev
    - libncurses5-dev
    - htop
    - pydf
    - jq
    - httpie
    - python-dev
    - python-cffi
    - python-pip
    - python-setuptools
    - python-wheel
    - python-virtualenv
    - python-requests
    - python-yaml
    - python3-dev
    - python3-cffi
    - python3-pip
    - python3-setuptools
    - python3-wheel
    - python3-requests
    - python3-yaml
    - nfs-common
    - unzip
    - build-essential
    - cmake
    - libtool
    - autoconf
    - ruby
    - sysstat
    - dstat
    - numactl
    - gdebi-core
    - sqlite3
    - stunnel
    - moreutils
    - curl
    - wget
    - git
    - aria2

build_docker_image:
  base_image: ubuntu:16.04
  rootfs_skel_dirs:
    - auto
  commands:
    - "echo aegea docker image builder"
  packages:
    - bsdtar
  cloud_config_data: {}

build_ami:
  base_ami: auto
  base_ami_product: com.ubuntu.cloud:server:16.04:amd64
  rootfs_skel_dirs:
    - auto
  packages:
    - squid-deb-proxy
    - libhdf5-dev
    - libboost-dev
    - fail2ban
    - emacs24-nox
    - byobu
    - keychain
    - colordiff
    - cgmanager-utils
    - nmap
  commands:
    - "sed -i -e '/cloudconfig/ d' /etc/fstab"
    - "sed -i -e '/^PermitRootLogin/ s/.*/PermitRootLogin no/' /etc/ssh/sshd_config"
    - "update-grub"
    - "grub-install /dev/xvda"
    - "pip3 install awscli-cwlogs==1.4.0 keymaker==0.2.1 boto3==1.4.3 awscli==1.11.36"
    - "keymaker install"
    - "activate-global-python-argcomplete"
    - "dpkg-reconfigure debconf -f noninteractive -p critical"
    - "apt-get install --yes virtualenv docker.io || true"
    - "apt-get remove --yes popularity-contest postfix apport"
    - "if dpkg-query --show snapd; then apt-get remove --yes snapd; fi"
    - "apt-get autoremove --yes"
    - "apt-get clean --yes"
    - "find /etc/cron.* -type f -not -name .placeholder -and -not -name logrotate -and -not -name fstrim -delete"
  cloud_config_data:
    apt_sources:
      - source: "deb http://cran.rstudio.com/bin/linux/ubuntu xenial/"
        filename: rstudio.list
        keyid: E084DAB9
#      - source: "deb http://apt.arvados.org/ trusty main"
#        filename: arvados.list
#        keyid: 1078ECD7

# Name your Route 53 private DNS zone here. If you leave the value as null, Aegea will enumerate the private DNS zones
# in your account, and if only one exists, select and use that one. Otherwise, Aegea will create and use a new private
# zone, "aegea."
dns:
  private_zone: null

# The CIDR and subnet prefix configuration here is only used by aegea when a default VPC is not found in your account in
# a given region that you have logged in to. AWS automatically creates a default VPC the first time you access a
# region. That VPC always has CIDR 172.31.0.0/16 with /20 subnets.
vpc:
  cidr:
    us-east-1: 10.0.0.0/16
    us-east-2: 10.1.0.0/16
    us-west-1: 10.2.0.0/16
    us-west-2: 10.3.0.0/16
    ap-northeast-1: 10.4.0.0/16
    ap-northeast-2: 10.5.0.0/16
    ap-southeast-1: 10.6.0.0/16
    ap-southeast-2: 10.7.0.0/16
    ap-south-1: 10.8.0.0/16
    ca-central-1: 10.9.0.0/16
    eu-west-1: 10.10.0.0/16
    eu-west-2: 10.11.0.0/16
    eu-central-1: 10.12.0.0/16
    sa-east-1: 10.13.0.0/16
  subnet_prefix: 20
  enable_dns_support: true
  enable_dns_hostnames: true
  map_public_ip_on_launch: true

ls:
  resource: ec2
  subresource: Instance
  sort_by: launch_time
  columns:
    - id
    - state
    - instance_type
    - launch_time
    - public_dns_name
    - image_id
    - tags
    - iam_instance_profile
    - security_groups
    - state_reason

iam_users:
  resource: iam
  subresource: User
  columns:
    - cur
    - name
    - user_id
    - create_date
    - password_last_used
    - groups
    - policies
    - mfa

iam_groups:
  resource: iam
  subresource: Group
  columns:
    - name
    - group_id
    - create_date
    - users
    - policies

iam_roles:
  resource: iam
  subresource: Role
  columns:
    - name
    - role_id
    - create_date
    - instance_profiles
    - policies

iam_policies:
  resource: iam
  subresource: Policy
  columns:
    - policy_name
    - arn
    - description
    - create_date
    - update_date
    - attachment_count
  sort_by: attachment_count

ebs_ls:
  resource: ec2
  subresource: Volume
  columns:
    - id
    - size
    - volume_type
    - iops
    - encrypted
    - state
    - create_time
    - attachments
    - availability_zone
    - tags

ebs_snapshots:
  resource: ec2
  subresource: Snapshot
  columns:
    - id
    - description
    - volume
    - volume_size
    - state
    - progress
    - encrypted
    - owner_id
    - start_time
    - tags

buckets_ls:
  resource: s3
  subresource: Bucket
  columns:
    - name
    - creation_date
    - LocationConstraint
    - NumberOfObjects
    - BucketSizeBytes

images:
  resource: ec2
  subresource: Image
  columns:
    - id
    - name
    - description
    - creation_date
    - public
    - virtualization_type
    - state
    - tags
  sort_by: creation_date

security_groups:
  resource: ec2
  subresource: SecurityGroup
  columns:
    - id
    - group_name
    - description
    - rule
    - proto
    - vpc_id
    - peer_description

acls:
  resource: ec2
  subresource: NetworkAcl
  columns:
    - id
    - associations
    - entries
    - is_default
    - vpc_id

clusters:
  columns:
    - clusterName
    - clusterArn
    - status
    - registeredContainerInstancesCount
    - runningTasksCount
    - pendingTasksCount

tasks:
  columns:
    - taskArn
    - taskDefinitionArn
    - clusterArn
    - lastStatus
    - desiredStatus
    - createdAt
    - overrides

ecr_ls:
  columns:
    - repositoryName
    - repositoryUri
    - registryId
    - imageTags
    - imageDigest
    - imagePushedAt
    - imageSizeInBytes
    - policy

sirs:
  columns:
    - SpotInstanceRequestId
    - CreateTime
    - SpotPrice
    - LaunchSpecification.InstanceType
    - State
    - Status.Message
    - InstanceId

sfrs:
  columns:
    - SpotFleetRequestId
    - SpotFleetRequestState
    - SpotFleetRequestConfig.TargetCapacity
    - SpotFleetRequestConfig.ExcessCapacityTerminationPolicy
    - SpotFleetRequestConfig.AllocationStrategy
    - CreateTime
    - SpotFleetRequestConfig.ValidFrom
    - SpotFleetRequestConfig.ValidUntil
    - SpotFleetRequestConfig.ClientToken
  sort_by: CreateTime

subnets:
  resource: ec2
  subresource: Subnet
  columns:
    - id
    - vpc_id
    - availability_zone
    - cidr_block
    - default_for_az
    - map_public_ip_on_launch
    - state
    - tags

tables:
  resource: dynamodb
  subresource: Table
  columns:
    - name
    - key_schema
    - attribute_definitions
    - item_count
    - provisioned_throughput
    - creation_date_time
    - table_size_bytes
    - table_status

efs_ls:
  columns:
    - Name
    - FileSystemId
    - SizeInBytes
    - CreationTime
    - LifeCycleState
  mount_target_columns:
    - MountTargetId
    - SubnetId
    - IpAddress
    - NetworkInterfaceId
    - tags

alarms:
  columns:
    - alarm_name
    - alarm_description
    - metric_name
    - comparison_operator
    - threshold
    - statistic
    - state_value
    - state_updated_timestamp
    - alarm_actions

billing_configure:
  billing_reports_bucket: "{account_id}-billing-reports"

billing_ls:
  columns:
    - lineItem/UsageStartDate
    - lineItem/UsageEndDate
    - lineItem/ProductCode
    - lineItem/UsageType
    - lineItem/Operation
    - lineItem/ResourceId
    - lineItem/UsageAmount
    - lineItem/UnblendedRate
    - lineItem/UnblendedCost
    - lineItem/BlendedRate
    - lineItem/BlendedCost
    - lineItem/LineItemDescription
    - resourceTags/aws:createdBy

limits:
  columns:
    - AttributeName
    - AttributeValues

cmks:
  columns:
    - KeyArn
    - KeyId
    - AliasName

rds_ls:
  columns:
    - DBName
    - Engine
    - EngineVersion
    - MultiAZ
    - AvailabilityZone
    - AllocatedStorage
    - MasterUsername
    - DBInstanceClass
    - StorageType
    - DBSecurityGroups
    - Endpoint
    - DBInstanceStatus
    - CopyTagsToSnapshot
    - DBInstanceIdentifier
    - tags

rds_snapshots:
  columns:
    - DBSnapshotIdentifier
    - DBInstanceIdentifier
    - SnapshotCreateTime
    - SnapshotType
    - Status
    - PercentProgress
    - Encrypted
    - MasterUsername
    - tags

rds_create:
  engine: postgres
  storage: 20
  storage_type: gp2
  db_instance_class: db.t2.large

rds_restore:
  storage: 20
  storage_type: gp2
  db_instance_class: db.t2.large

elb_ls:
  columns:
    - LoadBalancerName
    - type
    - DNSName
    - alias
    - InstanceId
    - Target
    - TargetHealth
    - State
    - Description
    - SecurityGroups

flow_logs_ls:
  columns:
    - FlowLogId
    - ResourceId
    - CreationTime
    - LogGroupName
    - TrafficType
    - FlowLogStatus
    - DeliverLogsErrorMessage

certificates:
  columns:
    - CertificateArn
    - DomainName

batch_queues:
  columns:
    - jobQueueName
    - jobQueueArn
    - priority
    - state
    - status
    - statusReason

# Valid instance types values: "optimal", family name, type name
batch_create_compute_environment:
  type: MANAGED
  compute_type: SPOT
  instance_types: [m4, c4, r4]
  min_vcpus: 0
  desired_vcpus: 2
  max_vcpus: 64
  ecs_container_instance_tags:
    AegeaMission: "ecs-container-instance"

batch_compute_environments:
  columns:
    - computeEnvironmentName
    - computeEnvironmentArn
    - type
    - state
    - status
    - statusReason
    - computeResources.type
    - computeResources.minvCpus
    - computeResources.desiredvCpus
    - computeResources.maxvCpus
    - computeResources.instanceTypes

batch_ls:
  sort_by: createdAt
  columns:
    - jobId
    - jobName
    - createdAt
    - status
    - statusReason
    - jobDefinition
    - parameters
    - container.image
    - container.environment
    - container.vcpus
    - container.memory
    - dependsOn

launch:
  commands: []
  packages: []
  cloud_config_data: {}

managed_iam_groups:
  aegea.launch:
    - AmazonEC2FullAccess
    - CloudWatchLogsReadOnlyAccess
    - IAMReadOnlyAccess
    - {"action": ["iam:PassRole", "route53:*"], "resource": "*"}
  aegea.batch.submit:
    - CloudWatchLogsReadOnlyAccess
    - IAMReadOnlyAccess
    - AmazonEC2ContainerRegistryFullAccess
    - {"action": ["iam:PassRole", "batch:*"], "resource": "*"}
#  aegea.batch.worker:
#  aegea.build_ami:
#  aegea.secrets.put:

log_level: "INFO"

audit:
  email: "akislyuk@exabio.com"
